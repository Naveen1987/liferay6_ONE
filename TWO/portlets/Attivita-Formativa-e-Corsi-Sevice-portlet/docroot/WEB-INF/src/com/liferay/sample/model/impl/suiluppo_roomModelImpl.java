/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.suiluppo_room;
import com.liferay.sample.model.suiluppo_roomModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the suiluppo_room service. Represents a row in the &quot;suiluppo_room&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.suiluppo_roomModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link suiluppo_roomImpl}.
 * </p>
 *
 * @author Naveen Kumar
 * @see suiluppo_roomImpl
 * @see com.liferay.sample.model.suiluppo_room
 * @see com.liferay.sample.model.suiluppo_roomModel
 * @generated
 */
public class suiluppo_roomModelImpl extends BaseModelImpl<suiluppo_room>
	implements suiluppo_roomModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a suiluppo_room model instance should use the {@link com.liferay.sample.model.suiluppo_room} interface instead.
	 */
	public static final String TABLE_NAME = "suiluppo_room";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roomID", Types.BIGINT },
			{ "room_name", Types.VARCHAR },
			{ "room_description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table suiluppo_room (roomID LONG not null primary key,room_name VARCHAR(75) null,room_description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table suiluppo_room";
	public static final String ORDER_BY_JPQL = " ORDER BY suiluppo_room.roomID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY suiluppo_room.roomID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.suiluppo_room"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.suiluppo_room"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.suiluppo_room"));

	public suiluppo_roomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roomID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoomID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roomID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return suiluppo_room.class;
	}

	@Override
	public String getModelClassName() {
		return suiluppo_room.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roomID", getRoomID());
		attributes.put("room_name", getRoom_name());
		attributes.put("room_description", getRoom_description());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roomID = (Long)attributes.get("roomID");

		if (roomID != null) {
			setRoomID(roomID);
		}

		String room_name = (String)attributes.get("room_name");

		if (room_name != null) {
			setRoom_name(room_name);
		}

		String room_description = (String)attributes.get("room_description");

		if (room_description != null) {
			setRoom_description(room_description);
		}
	}

	@Override
	public long getRoomID() {
		return _roomID;
	}

	@Override
	public void setRoomID(long roomID) {
		_roomID = roomID;
	}

	@Override
	public String getRoom_name() {
		if (_room_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _room_name;
		}
	}

	@Override
	public void setRoom_name(String room_name) {
		_room_name = room_name;
	}

	@Override
	public String getRoom_description() {
		if (_room_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _room_description;
		}
	}

	@Override
	public void setRoom_description(String room_description) {
		_room_description = room_description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			suiluppo_room.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public suiluppo_room toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (suiluppo_room)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		suiluppo_roomImpl suiluppo_roomImpl = new suiluppo_roomImpl();

		suiluppo_roomImpl.setRoomID(getRoomID());
		suiluppo_roomImpl.setRoom_name(getRoom_name());
		suiluppo_roomImpl.setRoom_description(getRoom_description());

		suiluppo_roomImpl.resetOriginalValues();

		return suiluppo_roomImpl;
	}

	@Override
	public int compareTo(suiluppo_room suiluppo_room) {
		long primaryKey = suiluppo_room.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof suiluppo_room)) {
			return false;
		}

		suiluppo_room suiluppo_room = (suiluppo_room)obj;

		long primaryKey = suiluppo_room.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<suiluppo_room> toCacheModel() {
		suiluppo_roomCacheModel suiluppo_roomCacheModel = new suiluppo_roomCacheModel();

		suiluppo_roomCacheModel.roomID = getRoomID();

		suiluppo_roomCacheModel.room_name = getRoom_name();

		String room_name = suiluppo_roomCacheModel.room_name;

		if ((room_name != null) && (room_name.length() == 0)) {
			suiluppo_roomCacheModel.room_name = null;
		}

		suiluppo_roomCacheModel.room_description = getRoom_description();

		String room_description = suiluppo_roomCacheModel.room_description;

		if ((room_description != null) && (room_description.length() == 0)) {
			suiluppo_roomCacheModel.room_description = null;
		}

		return suiluppo_roomCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{roomID=");
		sb.append(getRoomID());
		sb.append(", room_name=");
		sb.append(getRoom_name());
		sb.append(", room_description=");
		sb.append(getRoom_description());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.suiluppo_room");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roomID</column-name><column-value><![CDATA[");
		sb.append(getRoomID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_name</column-name><column-value><![CDATA[");
		sb.append(getRoom_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>room_description</column-name><column-value><![CDATA[");
		sb.append(getRoom_description());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = suiluppo_room.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			suiluppo_room.class
		};
	private long _roomID;
	private String _room_name;
	private String _room_description;
	private suiluppo_room _escapedModel;
}