/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.daffo.service.base;

import com.liferay.daffo.model.prontuario_drug;
import com.liferay.daffo.service.persistence.prontuario_drugPersistence;
import com.liferay.daffo.service.prontuario_drugLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the prontuario_drug local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.daffo.service.impl.prontuario_drugLocalServiceImpl}.
 * </p>
 *
 * @author Naveen
 * @see com.liferay.daffo.service.impl.prontuario_drugLocalServiceImpl
 * @see com.liferay.daffo.service.prontuario_drugLocalServiceUtil
 * @generated
 */
public abstract class prontuario_drugLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements prontuario_drugLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.daffo.service.prontuario_drugLocalServiceUtil} to access the prontuario_drug local service.
	 */

	/**
	 * Adds the prontuario_drug to the database. Also notifies the appropriate model listeners.
	 *
	 * @param prontuario_drug the prontuario_drug
	 * @return the prontuario_drug that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public prontuario_drug addprontuario_drug(prontuario_drug prontuario_drug)
		throws SystemException {
		prontuario_drug.setNew(true);

		return prontuario_drugPersistence.update(prontuario_drug);
	}

	/**
	 * Creates a new prontuario_drug with the primary key. Does not add the prontuario_drug to the database.
	 *
	 * @param drug_id the primary key for the new prontuario_drug
	 * @return the new prontuario_drug
	 */
	@Override
	public prontuario_drug createprontuario_drug(long drug_id) {
		return prontuario_drugPersistence.create(drug_id);
	}

	/**
	 * Deletes the prontuario_drug with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param drug_id the primary key of the prontuario_drug
	 * @return the prontuario_drug that was removed
	 * @throws PortalException if a prontuario_drug with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public prontuario_drug deleteprontuario_drug(long drug_id)
		throws PortalException, SystemException {
		return prontuario_drugPersistence.remove(drug_id);
	}

	/**
	 * Deletes the prontuario_drug from the database. Also notifies the appropriate model listeners.
	 *
	 * @param prontuario_drug the prontuario_drug
	 * @return the prontuario_drug that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public prontuario_drug deleteprontuario_drug(
		prontuario_drug prontuario_drug) throws SystemException {
		return prontuario_drugPersistence.remove(prontuario_drug);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(prontuario_drug.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return prontuario_drugPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.daffo.model.impl.prontuario_drugModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return prontuario_drugPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.daffo.model.impl.prontuario_drugModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return prontuario_drugPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return prontuario_drugPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return prontuario_drugPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public prontuario_drug fetchprontuario_drug(long drug_id)
		throws SystemException {
		return prontuario_drugPersistence.fetchByPrimaryKey(drug_id);
	}

	/**
	 * Returns the prontuario_drug with the primary key.
	 *
	 * @param drug_id the primary key of the prontuario_drug
	 * @return the prontuario_drug
	 * @throws PortalException if a prontuario_drug with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public prontuario_drug getprontuario_drug(long drug_id)
		throws PortalException, SystemException {
		return prontuario_drugPersistence.findByPrimaryKey(drug_id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return prontuario_drugPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the prontuario_drugs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.daffo.model.impl.prontuario_drugModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of prontuario_drugs
	 * @param end the upper bound of the range of prontuario_drugs (not inclusive)
	 * @return the range of prontuario_drugs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<prontuario_drug> getprontuario_drugs(int start, int end)
		throws SystemException {
		return prontuario_drugPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of prontuario_drugs.
	 *
	 * @return the number of prontuario_drugs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getprontuario_drugsCount() throws SystemException {
		return prontuario_drugPersistence.countAll();
	}

	/**
	 * Updates the prontuario_drug in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param prontuario_drug the prontuario_drug
	 * @return the prontuario_drug that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public prontuario_drug updateprontuario_drug(
		prontuario_drug prontuario_drug) throws SystemException {
		return prontuario_drugPersistence.update(prontuario_drug);
	}

	/**
	 * Returns the prontuario_drug local service.
	 *
	 * @return the prontuario_drug local service
	 */
	public com.liferay.daffo.service.prontuario_drugLocalService getprontuario_drugLocalService() {
		return prontuario_drugLocalService;
	}

	/**
	 * Sets the prontuario_drug local service.
	 *
	 * @param prontuario_drugLocalService the prontuario_drug local service
	 */
	public void setprontuario_drugLocalService(
		com.liferay.daffo.service.prontuario_drugLocalService prontuario_drugLocalService) {
		this.prontuario_drugLocalService = prontuario_drugLocalService;
	}

	/**
	 * Returns the prontuario_drug persistence.
	 *
	 * @return the prontuario_drug persistence
	 */
	public prontuario_drugPersistence getprontuario_drugPersistence() {
		return prontuario_drugPersistence;
	}

	/**
	 * Sets the prontuario_drug persistence.
	 *
	 * @param prontuario_drugPersistence the prontuario_drug persistence
	 */
	public void setprontuario_drugPersistence(
		prontuario_drugPersistence prontuario_drugPersistence) {
		this.prontuario_drugPersistence = prontuario_drugPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.daffo.model.prontuario_drug",
			prontuario_drugLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.daffo.model.prontuario_drug");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return prontuario_drug.class;
	}

	protected String getModelClassName() {
		return prontuario_drug.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = prontuario_drugPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.daffo.service.prontuario_drugLocalService.class)
	protected com.liferay.daffo.service.prontuario_drugLocalService prontuario_drugLocalService;
	@BeanReference(type = prontuario_drugPersistence.class)
	protected prontuario_drugPersistence prontuario_drugPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private prontuario_drugLocalServiceClpInvoker _clpInvoker = new prontuario_drugLocalServiceClpInvoker();
}